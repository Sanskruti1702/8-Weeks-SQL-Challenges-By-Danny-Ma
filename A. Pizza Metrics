**Schema (PostgreSQL v13)**

    CREATE SCHEMA pizza_runner;
    SET search_path = pizza_runner;
    
    DROP TABLE IF EXISTS runners;
    CREATE TABLE runners (
      "runner_id" INTEGER,
      "registration_date" DATE
    );
    INSERT INTO runners
      ("runner_id", "registration_date")
    VALUES
      (1, '2021-01-01'),
      (2, '2021-01-03'),
      (3, '2021-01-08'),
      (4, '2021-01-15');
    
    
    DROP TABLE IF EXISTS customer_orders;
    CREATE TABLE customer_orders (
      "order_id" INTEGER,
      "customer_id" INTEGER,
      "pizza_id" INTEGER,
      "exclusions" VARCHAR(4),
      "extras" VARCHAR(4),
      "order_time" TIMESTAMP
    );
    
    INSERT INTO customer_orders
      ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
    VALUES
      ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
      ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
      ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
      ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
      ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
      ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
      ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
      ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
      ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
      ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
      ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');
    
    
    DROP TABLE IF EXISTS runner_orders;
    CREATE TABLE runner_orders (
      "order_id" INTEGER,
      "runner_id" INTEGER,
      "pickup_time" VARCHAR(19),
      "distance" VARCHAR(7),
      "duration" VARCHAR(10),
      "cancellation" VARCHAR(23)
    );
    
    INSERT INTO runner_orders
      ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
    VALUES
      ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
      ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
      ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
      ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
      ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
      ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
      ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
      ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
      ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
      ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');
    
    
    DROP TABLE IF EXISTS pizza_names;
    CREATE TABLE pizza_names (
      "pizza_id" INTEGER,
      "pizza_name" TEXT
    );
    INSERT INTO pizza_names
      ("pizza_id", "pizza_name")
    VALUES
      (1, 'Meatlovers'),
      (2, 'Vegetarian');
    
    
    DROP TABLE IF EXISTS pizza_recipes;
    CREATE TABLE pizza_recipes (
      "pizza_id" INTEGER,
      "toppings" TEXT
    );
    INSERT INTO pizza_recipes
      ("pizza_id", "toppings")
    VALUES
      (1, '1, 2, 3, 4, 5, 6, 8, 10'),
      (2, '4, 6, 7, 9, 11, 12');
    
    
    DROP TABLE IF EXISTS pizza_toppings;
    CREATE TABLE pizza_toppings (
      "topping_id" INTEGER,
      "topping_name" TEXT
    );
    INSERT INTO pizza_toppings
      ("topping_id", "topping_name")
    VALUES
      (1, 'Bacon'),
      (2, 'BBQ Sauce'),
      (3, 'Beef'),
      (4, 'Cheese'),
      (5, 'Chicken'),
      (6, 'Mushrooms'),
      (7, 'Onions'),
      (8, 'Pepperoni'),
      (9, 'Peppers'),
      (10, 'Salami'),
      (11, 'Tomatoes'),
      (12, 'Tomato Sauce');

---

**Query #1**

    drop table if exists temp_customer_orders;

There are no results to be displayed.

---
**Query #2**

    create temporary table temp_customer_orders as 
    select order_id,customer_id,pizza_id, 
     case
      when exclusions= '' then null
      when exclusions= 'null' then null
      else exclusions
      end as exclusions,
     case 
      when extras='' then null
      when extras= 'null' then null
      else extras
      end as extras,
     order_time
    from pizza_runner.customer_orders;

There are no results to be displayed.

---
**Query #3**

    select * from temp_customer_orders;

| order_id | customer_id | pizza_id | exclusions | extras | order_time               |
| -------- | ----------- | -------- | ---------- | ------ | ------------------------ |
| 1        | 101         | 1        |            |        | 2020-01-01T18:05:02.000Z |
| 2        | 101         | 1        |            |        | 2020-01-01T19:00:52.000Z |
| 3        | 102         | 1        |            |        | 2020-01-02T23:51:23.000Z |
| 3        | 102         | 2        |            |        | 2020-01-02T23:51:23.000Z |
| 4        | 103         | 1        | 4          |        | 2020-01-04T13:23:46.000Z |
| 4        | 103         | 1        | 4          |        | 2020-01-04T13:23:46.000Z |
| 4        | 103         | 2        | 4          |        | 2020-01-04T13:23:46.000Z |
| 5        | 104         | 1        |            | 1      | 2020-01-08T21:00:29.000Z |
| 6        | 101         | 2        |            |        | 2020-01-08T21:03:13.000Z |
| 7        | 105         | 2        |            | 1      | 2020-01-08T21:20:29.000Z |
| 8        | 102         | 1        |            |        | 2020-01-09T23:54:33.000Z |
| 9        | 103         | 1        | 4          | 1, 5   | 2020-01-10T11:22:59.000Z |
| 10       | 104         | 1        |            |        | 2020-01-11T18:34:49.000Z |
| 10       | 104         | 1        | 2, 6       | 1, 4   | 2020-01-11T18:34:49.000Z |

---
**Query #4**

    drop table if exists temp_runner_orders;

There are no results to be displayed.

---
**Query #5**

    create temporary table  temp_runner_orders as
    select order_id,
           runner_id,
           case
               when pickup_time like 'null' then NULL
               else pickup_time
           end as pickup_time,
           case
               when distance like 'null' then NULL
               else cast(regexp_replace(distance, '[a-z]+', '') as float)
           end as distance,
           case
               when duration like 'null' then NULL
               else cast(regexp_replace(duration, '[a-z]+', '') as float)
          end as duration,
           case
               WHEN cancellation like '' then NULL
               WHEN cancellation like 'null' then NULL
               ELSE cancellation
           END AS cancellation
    FROM pizza_runner.runner_orders;

There are no results to be displayed.

---
**Query #6**

    SELECT * FROM temp_runner_orders;

| order_id | runner_id | pickup_time         | distance | duration | cancellation            |
| -------- | --------- | ------------------- | -------- | -------- | ----------------------- |
| 1        | 1         | 2020-01-01 18:15:34 | 20       | 32       |                         |
| 2        | 1         | 2020-01-01 19:10:54 | 20       | 27       |                         |
| 3        | 1         | 2020-01-03 00:12:37 | 13.4     | 20       |                         |
| 4        | 2         | 2020-01-04 13:53:03 | 23.4     | 40       |                         |
| 5        | 3         | 2020-01-08 21:10:57 | 10       | 15       |                         |
| 6        | 3         |                     |          |          | Restaurant Cancellation |
| 7        | 2         | 2020-01-08 21:30:45 | 25       | 25       |                         |
| 8        | 2         | 2020-01-10 00:15:02 | 23.4     | 15       |                         |
| 9        | 2         |                     |          |          | Customer Cancellation   |
| 10       | 1         | 2020-01-11 18:50:20 | 10       | 10       |                         |

---
**Query #7**

    select count(*) as pizza_count
     from pizza_runner.customer_orders;

| pizza_count |
| ----------- |
| 14          |

---
**Query #8**

    select count(distinct(order_id)) as order_count
    from pizza_runner.customer_orders;

| order_count |
| ----------- |
| 10          |

---
**Query #9**

    SELECT runner_id, 
      COUNT(order_id) AS successful_orders
    FROM temp_runner_orders
    WHERE cancellation is null
    GROUP BY runner_id
    ORDER BY runner_id;

| runner_id | successful_orders |
| --------- | ----------------- |
| 1         | 4                 |
| 2         | 3                 |
| 3         | 1                 |

---
**Query #10**

    SELECT 
      p.pizza_name, 
      COUNT(c.pizza_id) AS delivered_pizza_count
    FROM temp_customer_orders AS c
    JOIN temp_runner_orders AS r
      ON c.order_id = r.order_id
    JOIN pizza_runner.pizza_names AS p
      ON c.pizza_id = p.pizza_id
    WHERE cancellation is null
    GROUP BY p.pizza_name;

| pizza_name | delivered_pizza_count |
| ---------- | --------------------- |
| Vegetarian | 3                     |
| Meatlovers | 9                     |

---
**Query #11**

    SELECT 
      c.customer_id, 
      p.pizza_name, 
      COUNT(p.pizza_name) AS order_count
    FROM temp_customer_orders AS c
    JOIN pizza_runner.pizza_names AS p
      ON c.pizza_id= p.pizza_id
    GROUP BY c.customer_id, p.pizza_name
    ORDER BY c.customer_id;

| customer_id | pizza_name | order_count |
| ----------- | ---------- | ----------- |
| 101         | Meatlovers | 2           |
| 101         | Vegetarian | 1           |
| 102         | Meatlovers | 2           |
| 102         | Vegetarian | 1           |
| 103         | Meatlovers | 3           |
| 103         | Vegetarian | 1           |
| 104         | Meatlovers | 3           |
| 105         | Vegetarian | 1           |

---
**Query #12**

    WITH pizza_count_cte AS
    (
      SELECT 
        c.order_id, 
        COUNT(c.pizza_id) AS pizza_per_order
      FROM temp_customer_orders AS c
      JOIN temp_runner_orders AS r
        ON c.order_id = r.order_id
      WHERE cancellation is null
      GROUP BY c.order_id
    )
    
    SELECT 
      MAX(pizza_per_order) AS pizza_count
    FROM pizza_count_cte;

| pizza_count |
| ----------- |
| 3           |

---
**Query #13**

    SELECT customer_id,
           SUM(CASE
                   WHEN (exclusions IS NOT NULL OR extras IS NOT NULL) THEN 1
                   ELSE 0
               END) AS changes_in_pizza,
           SUM(CASE
                   WHEN (exclusions IS NULL
                         AND extras IS NULL) THEN 1
                   ELSE 0
               END) AS no_changes_in_pizza
    FROM temp_customer_orders
    INNER JOIN temp_runner_orders USING (order_id)
    WHERE cancellation IS NULL
    GROUP BY customer_id
    ORDER BY customer_id;

| customer_id | changes_in_pizza | no_changes_in_pizza |
| ----------- | ---------------- | ------------------- |
| 101         | 0                | 2                   |
| 102         | 0                | 3                   |
| 103         | 3                | 0                   |
| 104         | 2                | 1                   |
| 105         | 1                | 0                   |

---
**Query #14**

    SELECT customer_id,
           SUM(CASE
                   WHEN (exclusions IS NOT NULL AND extras IS NOT NULL) THEN 1
                   ELSE 0
               END) AS both_changes_in_pizza
    FROM temp_customer_orders
    INNER JOIN temp_runner_orders USING (order_id)
    WHERE cancellation IS NULL
    GROUP BY customer_id
    ORDER BY customer_id;

| customer_id | both_changes_in_pizza |
| ----------- | --------------------- |
| 101         | 0                     |
| 102         | 0                     |
| 103         | 0                     |
| 104         | 1                     |
| 105         | 0                     |

---
**Query #15**

    select 
         extract(hour from order_time) AS hour_of_day,
         COUNT(order_id) AS pizza_count
    from temp_customer_orders
    GROUP BY hour_of_day
    ORDER BY hour_of_day;

| hour_of_day | pizza_count |
| ----------- | ----------- |
| 11          | 1           |
| 13          | 3           |
| 18          | 3           |
| 19          | 1           |
| 21          | 3           |
| 23          | 3           |

---
**Query #16**

    select extract(dow from order_time) as day_of_the_week,
           COUNT(order_id) AS total_pizzas_ordered
    from temp_customer_orders
    GROUP BY day_of_the_week
    order by day_of_the_week;

| day_of_the_week | total_pizzas_ordered |
| --------------- | -------------------- |
| 3               | 5                    |
| 4               | 3                    |
| 5               | 1                    |
| 6               | 5                    |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/7VcQKQwsS3CTkGRFG7vu98/65)
